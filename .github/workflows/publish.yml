name: Website

on:
  workflow_dispatch:
    inputs:
      Version:
        description: Version
        required: true

jobs:
  website:
    name: Build and Deploy Website
    runs-on: macos-13-large

    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          scope: '@noop-inc'

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install the Apple certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          CERTIFICATE_IDENTITY: ${{ secrets.CERTIFICATE_IDENTITY }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          security find-identity -p codesigning -v

      - name: Bump Version
        run: node .github/workflows/bump.mjs
        env:
          VERSION_INPUT: ${{ github.event.inputs.Version }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Cache NPM
      #   id: cache-npm
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.npm
      #       ./node_modules
      #     key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
      #     restore-keys: ${{ runner.os }}-npm-

      - name: Install Dependencies
        # if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGES_READ_TOKEN }}

      # - name: Cache Build
      #   id: cache-build
      #   uses: actions/cache@v3
      #   with:
      #     path: ./node_modules/.cache/webpack
      #     key: ${{ runner.os }}-webpack-cache-${{ github.sha }}

      - name: Build Console
        run: npm run publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGES_READ_TOKEN }}

      # - name: Deploy Main to S3
      #   if: github.event.inputs.DeploySector == 'main'
      #   run: aws s3 cp --recursive --acl public-read --cache-control max-age=60 dist/ s3://noop-console/
      #   env:
      #     AWS_REGION: us-west-2
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Deploy Staging to S3
      #   if: github.event.inputs.DeploySector == 'staging'
      #   run: aws s3 cp --recursive --acl public-read --cache-control max-age=60 dist/ s3://noop-console-staging/
      #   env:
      #     AWS_REGION: us-west-2
      #     AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_ACCESS_KEY }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_SECRET_KEY }}